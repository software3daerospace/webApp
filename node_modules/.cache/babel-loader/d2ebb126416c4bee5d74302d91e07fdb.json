{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isSelected = isSelected;\nexports.slotWidth = slotWidth;\nexports.getCellAtX = getCellAtX;\nexports.pointInBox = pointInBox;\nexports.dateCellSelection = dateCellSelection;\n\nfunction isSelected(event, selected) {\n  if (!event || selected == null) return false;\n  return [].concat(selected).indexOf(event) !== -1;\n}\n\nfunction slotWidth(rowBox, slots) {\n  var rowWidth = rowBox.right - rowBox.left;\n  var cellWidth = rowWidth / slots;\n  return cellWidth;\n}\n\nfunction getCellAtX(rowBox, x, cellWidth, rtl, slots) {\n  return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\n\nfunction pointInBox(box, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\n\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n  var startIdx = -1;\n  var endIdx = -1;\n  var lastSlotIdx = slots - 1;\n  var cellWidth = slotWidth(rowBox, slots); // cell under the mouse\n\n  var currentSlot = getCellAtX(rowBox, box.x, cellWidth, rtl, slots); // Identify row as either the initial row\n  // or the row under the current mouse point\n\n  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n  var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y; // this row's position relative to the start point\n\n  var isAboveStart = start.y > rowBox.bottom;\n  var isBelowStart = rowBox.top > start.y;\n  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom; // this row is between the current and start rows, so entirely selected\n\n  if (isBetween) {\n    startIdx = 0;\n    endIdx = lastSlotIdx;\n  }\n\n  if (isCurrentRow) {\n    if (isBelowStart) {\n      startIdx = 0;\n      endIdx = currentSlot;\n    } else if (isAboveStart) {\n      startIdx = currentSlot;\n      endIdx = lastSlotIdx;\n    }\n  }\n\n  if (isStartRow) {\n    // select the cell under the initial point\n    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n\n    if (isCurrentRow) {\n      if (currentSlot < startIdx) startIdx = currentSlot;else endIdx = currentSlot; //select current range\n    } else if (start.y < box.y) {\n      // the current row is below start row\n      // select cells to the right of the start cell\n      endIdx = lastSlotIdx;\n    } else {\n      // select cells to the left of the start cell\n      startIdx = 0;\n    }\n  }\n\n  return {\n    startIdx: startIdx,\n    endIdx: endIdx\n  };\n}","map":{"version":3,"sources":["/home/software/software/app/3daerospace_App/node_modules/react-big-calendar/lib/utils/selection.js"],"names":["exports","__esModule","isSelected","slotWidth","getCellAtX","pointInBox","dateCellSelection","event","selected","concat","indexOf","rowBox","slots","rowWidth","right","left","cellWidth","x","rtl","Math","floor","box","_ref","y","top","bottom","start","startIdx","endIdx","lastSlotIdx","currentSlot","isCurrentRow","isStartRow","isAboveStart","isBelowStart","isBetween"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isSelected = isSelected;\nexports.slotWidth = slotWidth;\nexports.getCellAtX = getCellAtX;\nexports.pointInBox = pointInBox;\nexports.dateCellSelection = dateCellSelection;\nfunction isSelected(event, selected) {\n  if (!event || selected == null) return false;\n  return [].concat(selected).indexOf(event) !== -1;\n}\n\nfunction slotWidth(rowBox, slots) {\n  var rowWidth = rowBox.right - rowBox.left;\n  var cellWidth = rowWidth / slots;\n\n  return cellWidth;\n}\n\nfunction getCellAtX(rowBox, x, cellWidth, rtl, slots) {\n  return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\n\nfunction pointInBox(box, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n\n  return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\n\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n  var startIdx = -1;\n  var endIdx = -1;\n  var lastSlotIdx = slots - 1;\n\n  var cellWidth = slotWidth(rowBox, slots);\n\n  // cell under the mouse\n  var currentSlot = getCellAtX(rowBox, box.x, cellWidth, rtl, slots);\n\n  // Identify row as either the initial row\n  // or the row under the current mouse point\n  var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n  var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y;\n\n  // this row's position relative to the start point\n  var isAboveStart = start.y > rowBox.bottom;\n  var isBelowStart = rowBox.top > start.y;\n  var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;\n\n  // this row is between the current and start rows, so entirely selected\n  if (isBetween) {\n    startIdx = 0;\n    endIdx = lastSlotIdx;\n  }\n\n  if (isCurrentRow) {\n    if (isBelowStart) {\n      startIdx = 0;\n      endIdx = currentSlot;\n    } else if (isAboveStart) {\n      startIdx = currentSlot;\n      endIdx = lastSlotIdx;\n    }\n  }\n\n  if (isStartRow) {\n    // select the cell under the initial point\n    startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n\n    if (isCurrentRow) {\n      if (currentSlot < startIdx) startIdx = currentSlot;else endIdx = currentSlot; //select current range\n    } else if (start.y < box.y) {\n      // the current row is below start row\n      // select cells to the right of the start cell\n      endIdx = lastSlotIdx;\n    } else {\n      // select cells to the left of the start cell\n      startIdx = 0;\n    }\n  }\n\n  return { startIdx: startIdx, endIdx: endIdx };\n}"]},"metadata":{},"sourceType":"script"}