import React from 'react';
import {Map, TileLayer, Marker} from 'react-leaflet';
import axios from 'axios';
import styled from 'styled-components';
import * as credentials from './credentials.json';

const StyledSection = styled('section')`
  display: flex;
  flex-direction: column;
  align-items: stretch;
  background: #F6F4EF;
  width: 50%;
  min-width: 38rem;
  border-radius: .25rem .25rem 0 0;
`

const StyledMap = styled(Map)`
  align-self: center;
  width: 350px;
  height: 350px;
  border: 3px solid hsl(209, 62%, 50%);
  border-radius: 50%;
  margin: 2rem 0;
`

const StyledDiv = styled('div')`
  background: hsl(209, 62%, 50%);
`

const StyledForm = styled('form')`
  display: flex;
  flex-direction: column;
  align-items: stretch;
`;

const StyledLabel = styled('label')`
  text-align: center;
`

const StyledInput = styled('input')`
  font: 400 2rem Lato;

  &[type='text'] {
    background: #F6F4EF;
    padding: .75rem;
    margin: 1rem;
  }

  &[type='submit'] {
    align-self: center;
    background: #F6F4EF;
    padding: 1rem;
    border: none;
    margin: 1rem;
  }
`

const StyledUl = styled('ul')`
  list-style: none;
  padding: 0;
  margin: 0;
`

const StyledLi = styled('li')`
  cursor: pointer;
  padding: 1rem;

  &:nth-child(even) {
    background: #E8E3D6;
  }

  &:nth-child(odd) {
    background: #f6f4ef;
  }
`

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      position: {
        latitude: 48.853,
        longitude: 2.35
      },
      addressReq: null,
      addressRes: null,
      zoom: 16
    }
  }
  
  componentDidMount() {
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {
        this.setState({
          position: {
            latitude: position.coords.latitude, 
            longitude: position.coords.longitude
          }
        });
      });
    };
  };

  logCoords = () => {
    const {lat, lng} = this.refs.marker.leafletElement.getLatLng();
    this.setState({
      position: {
        latitude: lat,
        longitude: lng
      }
    });
  };

  setAddress = (e) => {
    this.setState({
      addressReq: e.target.value
    });
  };

  requestAddress = (e) => {
    e.preventDefault();
    axios.get(`https://api-adresse.data.gouv.fr/search/?q=${this.state.addressReq}`)
      .then(response => {
        this.setState({
          addressRes: response.data.features
        })
      })
      .catch(error => {
        console.log(error);
      });
  }

  setAddressCoords = (coords) => {
    this.setState({
      position: {
        latitude: coords[1],
        longitude: coords[0]
      }
    })
  }

  handleZoomLevel = () => {
    const zoomLevel = this.innerRef.leafletElement.getZoom();
    this.setState({
      zoom: zoomLevel
    })
  }

  render() {
    const position = [this.state.position.latitude, this.state.position.longitude];
    const zoom = this.state.zoom

    return (
      <StyledSection>
        <StyledMap 
          id='mapid'
          innerRef={node => {this.innerRef = node}}
          center={position} 
          zoom={zoom} 
          zoomControl={false}
          onZoomEnd={this.handleZoomLevel}
        >
          <TileLayer 
            url='https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}'
            id='mapbox.outdoors'
            accessToken={credentials.tokens.mapbox}
         />
          <Marker
            ref='marker'
            position={position}
            draggable={true}
            onDragend={this.logCoords}
          />
        </StyledMap>
        <StyledDiv>
          <StyledForm 
            onSubmit={this.requestAddress}
          >
            <StyledLabel>Adresse :
              <StyledInput 
                type="text" 
                onChange={this.setAddress} 
              />
            </StyledLabel>
            <StyledInput 
              type="submit" 
              value="Lancer la recherche" 
            />
          </StyledForm>
          { this.state.addressRes && 
          <StyledUl>
            {this.state.addressRes.map((item, index) => (
              <StyledLi 
                key={index} 
                onClick={(e) => this.setAddressCoords(item.geometry.coordinates, e)}
              >
                <strong>{item.properties.label}</strong> <br />
                {item.properties.context}
              </StyledLi>
            ))}
          </StyledUl> 
          } 
        </StyledDiv>
      </StyledSection>
    )
  }
}

export default App;